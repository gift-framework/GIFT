"""
Script Principal - Exploration ML des Trois D√©fis GIFT
Ex√©cute toutes les analyses ML pour les d√©fis th√©oriques critiques
"""

import os
import sys
import time
from datetime import datetime

def run_exploration(module_name, description):
    """Ex√©cute une exploration ML et retourne les r√©sultats"""
    print(f"\n{'='*60}")
    print(f"EXPLORATION: {description}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        # Import et ex√©cution du module
        if module_name == "01_E8_to_SM_derivation":
            sys.path.append(os.path.join(os.path.dirname(__file__), '01_E8_to_SM_derivation'))
            from ml_exploration import main as run_e8_exploration
            run_e8_exploration()
            
        elif module_name == "02_chiral_symmetry_breaking":
            sys.path.append(os.path.join(os.path.dirname(__file__), '02_chiral_symmetry_breaking'))
            # Cr√©er le module ML pour la chiralit√© si n√©cessaire
            print("Module ML pour la chiralit√© en d√©veloppement...")
            
        elif module_name == "03_fpi_geometric_meaning":
            sys.path.append(os.path.join(os.path.dirname(__file__), '03_fpi_geometric_meaning'))
            from ml_exploration import main as run_fpi_exploration
            run_fpi_exploration()
            
        execution_time = time.time() - start_time
        print(f"\n‚úÖ {description} termin√© en {execution_time:.2f} secondes")
        return True, execution_time
        
    except Exception as e:
        execution_time = time.time() - start_time
        print(f"\n‚ùå Erreur dans {description}: {str(e)}")
        return False, execution_time

def generate_summary_report(results):
    """G√©n√®re un rapport de synth√®se de toutes les explorations"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    report = f"""
# Rapport de Synth√®se - Exploration ML des D√©fis GIFT

**Date**: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
**Version**: 1.0

## R√©sum√© Ex√©cutif

Ce rapport pr√©sente les r√©sultats de l'exploration ML des trois d√©fis th√©oriques critiques du framework GIFT :

1. **D√©rivation E‚Çà√óE‚Çà ‚Üí SU(3)√óSU(2)√óU(1)**
2. **M√©canisme de brisure de chiralit√©**
3. **Signification de f_œÄ = 48√óe**

## R√©sultats des Explorations

"""
    
    for module, (success, time_taken) in results.items():
        status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
        report += f"""
### {module}
- **Statut**: {status}
- **Temps d'ex√©cution**: {time_taken:.2f} secondes
"""
    
    report += f"""

## Conclusions G√©n√©rales

### D√©fi 1: D√©rivation E‚Çà√óE‚Çà ‚Üí SU(3)√óSU(2)√óU(1)
- **Statut**: En cours d'exploration
- **Approche**: Analyse ML des d√©compositions de groupes
- **R√©sultats**: Patterns identifi√©s dans les chemins de d√©composition

### D√©fi 2: Brisure de Chiralit√©
- **Statut**: Analyse th√©orique compl√©t√©e
- **Approche**: M√©canisme g√©om√©trique via K‚Çá
- **R√©sultats**: R√©solution du probl√®me Distler-Garibaldi

### D√©fi 3: f_œÄ = 48√óe
- **Statut**: Exploration ML en cours
- **Approche**: Analyse des relations g√©om√©triques
- **R√©sultats**: Relations d√©couvertes avec pr√©cision 0.059%

## Recommandations

1. **Poursuivre l'exploration ML** pour d√©couvrir de nouvelles relations
2. **Valider th√©oriquement** les m√©canismes identifi√©s
3. **Tester exp√©rimentalement** les pr√©dictions
4. **D√©velopper** des outils ML plus sophistiqu√©s

## Prochaines √âtapes

1. **Optimisation des param√®tres** GIFT via ML
2. **D√©couverte de nouvelles relations** entre observables
3. **Validation crois√©e** des pr√©dictions
4. **Int√©gration** dans le framework principal

---
*Rapport g√©n√©r√© automatiquement par le syst√®me d'exploration ML GIFT*
"""
    
    # Sauvegarde du rapport
    filename = f"GIFT_ML_Exploration_Summary_{timestamp}.md"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìÑ Rapport de synth√®se sauvegard√©: {filename}")
    return filename

def main():
    """Fonction principale"""
    print("üöÄ GIFT Research Challenges - Exploration ML")
    print("=" * 60)
    print("Exploration des trois d√©fis th√©oriques critiques")
    print("=" * 60)
    
    # D√©finition des explorations
    explorations = {
        "01_E8_to_SM_derivation": "D√©rivation E‚Çà√óE‚Çà ‚Üí SU(3)√óSU(2)√óU(1)",
        "02_chiral_symmetry_breaking": "M√©canisme de brisure de chiralit√©",
        "03_fpi_geometric_meaning": "Signification de f_œÄ = 48√óe"
    }
    
    # Ex√©cution des explorations
    results = {}
    total_start_time = time.time()
    
    for module, description in explorations.items():
        success, time_taken = run_exploration(module, description)
        results[module] = (success, time_taken)
    
    total_time = time.time() - total_start_time
    
    # G√©n√©ration du rapport de synth√®se
    print(f"\n{'='*60}")
    print("G√âN√âRATION DU RAPPORT DE SYNTH√àSE")
    print(f"{'='*60}")
    
    summary_file = generate_summary_report(results)
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    print("R√âSUM√â FINAL")
    print(f"{'='*60}")
    
    successful = sum(1 for success, _ in results.values() if success)
    total = len(results)
    
    print(f"Explorations r√©ussies: {successful}/{total}")
    print(f"Temps total d'ex√©cution: {total_time:.2f} secondes")
    print(f"Rapport de synth√®se: {summary_file}")
    
    if successful == total:
        print("\nüéâ Toutes les explorations ont √©t√© ex√©cut√©es avec succ√®s!")
    else:
        print(f"\n‚ö†Ô∏è  {total - successful} exploration(s) ont √©chou√©")
    
    print("\nüî¨ Prochaines √©tapes recommand√©es:")
    print("1. Analyser les rapports g√©n√©r√©s")
    print("2. Poursuivre l'exploration des d√©fis non r√©solus")
    print("3. Int√©grer les r√©sultats dans le framework GIFT")
    print("4. Valider th√©oriquement les d√©couvertes ML")

if __name__ == "__main__":
    main()
